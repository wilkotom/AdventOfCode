Python 3.11.0 (v3.11.0:deaf509e8f, Oct 24 2022, 14:43:23) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> checksum_char = lambda(x: (ord(x)*17)%256
  File "<stdin>", line 1
    checksum_char = lambda(x: (ord(x)*17)%256
                          ^
SyntaxError: invalid syntax
>>> ^D
  │  ~/AdventOfCode  python3                                                                     ✔ │ 2m 13s  │ 12:36:00  
Python 3.11.0 (v3.11.0:deaf509e8f, Oct 24 2022, 14:43:23) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> checksum_char = lambda x: (ord(x)*17)%256
>>> checksum_char('H')
200
>>> def checksum_string(chars):
...   total = 0
...   for char in chars:
...     total 
KeyboardInterrupt
>>> ^D
  │  ~/AdventOfCode  python3                                                                      ✔ │ 2m 1s  │ 12:38:03  
Python 3.11.0 (v3.11.0:deaf509e8f, Oct 24 2022, 14:43:23) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> checksum_char = lambda x,y : ((y+ord(x))*17)%256
>>> checksum_char('H',0)
200
>>> checksum_char('A', 200)
153
>>> def checksum_string(chars):
...   total = 0
...   for char in chars:
...     total = checksum_char(chars, total)
...   return total
... 
>>> checksum_string('HASH')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 4, in checksum_string
  File "<stdin>", line 1, in <lambda>
TypeError: ord() expected a character, but string of length 4 found
>>> for x in 'Hello':
...   print(c)
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: name 'c' is not defined
>>> for x in 'Hello':
...   print(x)
... 
H
e
l
l
o
>>> def checksum_string(chars):
...   total = 0
...   for c in chars:
...     print(c)
... 
>>> checksum_string('HASH')
H
A
S
H
>>>   print(c)
KeyboardInterrupt
>>> 
KeyboardInterrupt
>>> ^D
  │  ~/AdventOfCode                                                                              ✔ │ 2m 57s  │ 12:41:02  
  │  ~/AdventOfCode  python3                                                                     ✔ │ 2m 57s  │ 12:41:02  
Python 3.11.0 (v3.11.0:deaf509e8f, Oct 24 2022, 14:43:23) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> checksum_char = lambda x,y : ((y+ord(x))*17)%256
>>> checksum_char('H',0)
200
>>> checksum_char('A', 200)
153
>>> char('c')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'char' is not defined. Did you mean: 'chr'?
>>> chr('c')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object cannot be interpreted as an integer
>>> def checksum_string(chars):
...   for c in chars:
...     print(c, type(c)))
  File "<stdin>", line 3
    print(c, type(c)))
                     ^
SyntaxError: unmatched ')'
>>> 
>>>     print(c, type(c))
  File "<stdin>", line 1
    print(c, type(c))
IndentationError: unexpected indent
>>> def checksum_string(chars):
...   for c in chars:
...     print(c, type(c))
... 
>>> checksum_string('HASH')
H <class 'str'>
A <class 'str'>
S <class 'str'>
H <class 'str'>
>>> def checksum_string(chars):
... def checksum_string(chars):
  File "<stdin>", line 2
    def checksum_string(chars):
    ^
IndentationError: expected an indented block after function definition on line 1
>>> def checksum_string(chars):
...   total = 0
...   for c in chars:
...     total = checksum_char(chars[0], total)
... 
>>> def checksum_string(chars):
...   total = 0
...   for c in chars:
...     total = checksum_char(chars[0], total)
...   return 0
... 
>>> checksum_string('HASH')
0
>>> def checksum_string(chars):
...   for c in chars:
... 
KeyboardInterrupt
>>> def checksum_string(chars):
...   total = 0
...   for c in chars:
...     total = checksum_char(chars[0], total)
...   return total
... 
>>> checksum_string('HASH')
32
>>> def checksum_string(chars):
...   total = 0
...   for c in chars:
...     total = checksum_char(chars[0], total)
...     print(total)
...   return total
... 
>>> checksum_string('HASH')
200
16
216
32
32
>>> checksum_char('H', 0)
200
>>> checksum_char('A', 200)
153
>>> def checksum_string(chars):
...   for c in chars:
... 
KeyboardInterrupt
>>> def checksum_string(chars):
...   total = 0
...   for c in chars:
...     total = checksum_char(chars[0], total)
...   return total
... 
>>> def checksum_char(c, t):
...   t = t + ord(c)
...   t = t * 17
...   T = t % 256
...   
KeyboardInterrupt
>>> def checksum_char(c, t):
...   t = t + ord(c)
...   t = t * 17
...   t = t % 256
...   return t
... 
>>> checksum_string('HASH')
32
>>> 
>>> def checksum_char(c, t):
...   t = t + ord(c)
...   print(t)
...   t = t * 17
... print(t)
  File "<stdin>", line 5
    print(t)
    ^^^^^
SyntaxError: invalid syntax
>>> def checksum_char(c, t):
...   t = t + ord(c)
...   print(t)
...   t = t * 17
...   print(t)
...   t =  t % 256
...   print(t)
...   return t
... 
>>> checksum_string('HASH')
72
1224
200
272
4624
16
88
1496
216
288
4896
32
32
>>> ord('A')
65
>>> for c in 'HASH':
...   print(ord(c))
... 
72
65
83
72
>>> def checksum_string(chars):
...   for c in chars:
...     print(ord(c))
... 
>>> checksum_string('HASH')
72
65
83
72
>>> 
>>> def checksum_string(chars):
...   total = 0
...   for c in chars:
...    total = checksum_char(c, total)
...   return total
... 
>>> checksum_string('HASH')
72
1224
200
265
4505
153
236
4012
172
244
4148
52
52
>>> let hashmap = []
  File "<stdin>", line 1
    let hashmap = []
        ^^^^^^^
SyntaxError: invalid syntax
>>> hashmap = []
>>> for i in range(256):
...   hashmap.append({})
... 
>>> hashmap
[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]
>>> let test_data="rn=1,cm-,qp=3,cm=2,qp-,pc=4,ot=9,ab=5,pc-,pc=6,ot=7"
  File "<stdin>", line 1
    let test_data="rn=1,cm-,qp=3,cm=2,qp-,pc=4,ot=9,ab=5,pc-,pc=6,ot=7"
        ^^^^^^^^^
SyntaxError: invalid syntax
>>> test_data="rn=1,cm-,qp=3,cm=2,qp-,pc=4,ot=9,ab=5,pc-,pc=6,ot=7"
>>> for record in test_data:
...   if '-' in record:
...     cs = checksum_string(record[0..record.len()-1])
...     hashmap[cs].pop(;
KeyboardInterrupt
>>> for record in test_data.split(','):
...   print(record)
... 
rn=1
cm-
qp=3
cm=2
qp-
pc=4
ot=9
ab=5
pc-
pc=6
ot=7
>>> for record in test_data.split(','):
...   if record.endswith('-'):
...     cs = checksum_string(record[0..record.len()-1])
...     hashmap[cs].pop(record[0..record.len()-1])
...   else:
...     key, val = record.split('=')
...     hashmap[key] = int(val)
... 
Traceback (most recent call last):
  File "<stdin>", line 7, in <module>
TypeError: list indices must be integers or slices, not str
>>> for record in test_data.split(','):
...   if record.endswith('-'):
...     cs = checksum_string(record[0..record.len()-1])
...     hashmap[cs].pop(record[0..record.len()-1])
...   else:
...     key, val = record.split('=')
...     cs = checksum_string(key)
...     hashmap[cs][key] = val
... 
114
1938
146
256
4352
0
Traceback (most recent call last):
  File "<stdin>", line 3, in <module>
AttributeError: 'float' object has no attribute 'record'
>>> record
'cm-'
>>> for i in range(256):
... 
KeyboardInterrupt
>>> hashmap = {}
>>> for i in range(256):
...  hashmap.append({})
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
AttributeError: 'dict' object has no attribute 'append'
>>> hashmap = []
>>> for i in range(256):
...  hashmap.append({})
... 
>>> hashmap
[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]
>>> for record in test_data.split(','):
...   if record.endswith('-'):
...     hashmap[cs].pop(record[0:len(record)-1])
...   if record.endswith('-'):
KeyboardInterrupt
>>> for record in test_data.split(','):
...     cs = checksum_string(record[0..record.len()-1])
...     hashmap[cs].pop(record[0..record.len()-1])
...   else:
  File "<stdin>", line 4
    else:
         ^
IndentationError: unindent does not match any outer indentation level
>>> for record in test_data.split(','):
...  if record.endswith('-'):
...     cs = checksum_string(record[0..record.len()-1])
...     hashmap[cs].pop(record[0..record.len()-1])
...  else:
...     key, val = record.split('=')
...     cs = checksum_string(key)
...     hashmap[cs][key] = val
... 
114
1938
146
256
4352
0
Traceback (most recent call last):
  File "<stdin>", line 3, in <module>
AttributeError: 'float' object has no attribute 'record'
>>> for record in test_data.split(','):
...   if record.endswith('-'):
...     cs = checksum_string(record[0..record.len()-1])
...     cs = checksum_string(record[0..record.len()-1])
KeyboardInterrupt
>>> for record in test_data.split(','):
...   if record.endswith('-'):
...     cs = checksum_string(record[0:record.len()-1])
...     hashmap[cs].pop(record[0:record.len()-1])
...  else:
  File "<stdin>", line 5
    else:
         ^
IndentationError: unindent does not match any outer indentation level
>>>   if record.endswith('-'):
  File "<stdin>", line 1
    if record.endswith('-'):
IndentationError: unexpected indent
>>> for record in test_data.split(','):
...   if record.endswith('-'):
...     cs = checksum_string(record[0:record.len()-1])
...     hashmap[cs].pop(record[0:record.len()-1])
...   else:
...     key, val = record.split('=')
...     cs = checksum_string(key)
...     hashmap[cs][key] = val
... 
114
1938
146
256
4352
0
Traceback (most recent call last):
  File "<stdin>", line 3, in <module>
AttributeError: 'str' object has no attribute 'len'
>>> for record in test_data.split(','):
...   if record.endswith('-'):
...     hashmap[cs].pop(record[0:record.len()-1])
KeyboardInterrupt
>>> hashmap = [{}] * 256
>>> for record in test_data.split(','):
...   if record.endswith('-'):
...     cs = checksum_string(record[0:len(record)-1])
...     hashmap[cs].pop(record[0:len(record)-1])
...   else:
...     key, val = record.split('=')
...     cs = checksum_string(key)
...     hashmap[cs][key] = val
... 
114
1938
146
256
4352
0
99
1683
147
256
4352
0
Traceback (most recent call last):
  File "<stdin>", line 4, in <module>
KeyError: 'cm'
>>> hashmap = [{}] * 256
>>> hashmap = [{}] * 256
>>> for record in test_data.split(','):
...    if record.endswith('-'):
...      cs = checksum_string(record[0:len(record)-1])
...      if record[0:len(record)-1] in hashmap[cs]:
...        hashmap[cs].pop(record[0:len(record)-1])
...    else:
...      key, val = record.split('=')
...      cs = checksum_string(key)
...      hashmap[cs][key] = val
... 
114
1938
146
256
4352
0
99
1683
147
256
4352
0
113
1921
129
241
4097
1
99
1683
147
256
4352
0
113
1921
129
241
4097
1
'3'
112
1904
112
211
3587
3
111
1887
95
211
3587
3
97
1649
113
211
3587
3
112
1904
112
211
3587
3
'4'
112
1904
112
211
3587
3
111
1887
95
211
3587
3
>>> hashmap
[{'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}, {'rn': '1', 'cm': '2', 'ot': '7', 'ab': '5', 'pc': '6'}]
>>>  
>>> 
>>> 
>>> 
>>> 
>>> hashmap = []
>>> for i in range(256):
...   hashmap.append({})
... 
>>> for record in test_data.split(','):
...    if record.endswith('-'):
...      cs = checksum_string(record[0:len(record)-1])
...      if record[0:len(record)-1] in hashmap[cs]:
...        hashmap[cs].pop(record[0:len(record)-1])
...    else:
...      key, val = record.split('=')
...      cs = checksum_string(key)
...      hashmap[cs][key] = val
... 
114
1938
146
256
4352
0
99
1683
147
256
4352
0
113
1921
129
241
4097
1
99
1683
147
256
4352
0
113
1921
129
241
4097
1
'3'
112
1904
112
211
3587
3
111
1887
95
211
3587
3
97
1649
113
211
3587
3
112
1904
112
211
3587
3
'4'
112
1904
112
211
3587
3
111
1887
95
211
3587
3
>>> hashmap
[{'rn': '1', 'cm': '2'}, {}, {}, {'ot': '7', 'ab': '5', 'pc': '6'}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]
>>> 
